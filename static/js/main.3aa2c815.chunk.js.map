{"version":3,"sources":["authenticationKeys.js","Dashboard.js","index.js"],"names":["keys","instagramAppId","instagramSecret","redirectUri","Dashboard","props","state","requestUrl","userAccessToken","userId","loc","window","location","search","code","URLSearchParams","get","console","log","getUserAccessToken","postData","client_id","this","client_secret","grant_type","redirect_uri","fetch","method","headers","body","qs","stringify","then","response","json","data","catch","error","xhr","XMLHttpRequest","url","addEventListener","responseURL","replace","open","send","display","type","onClick","getUserCode","bind","className","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAMeA,EANF,CACXC,eAAiB,kBACjBC,gBAAkB,mCAClBC,YAAc,0C,gBC+FDC,E,kDApFb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IATRC,MAAQ,CACNC,WAAa,6CACbN,eAAiBD,EAAKC,eACtBC,gBAAkBF,EAAKE,gBACvBC,YAAcH,EAAKG,YACnBK,gBAAkB,GAClBC,OAAS,IAKT,IAAIC,EAAMC,OAAOC,SAASC,OAEtBC,EADS,IAAIC,gBAAgBL,GACfM,IAAI,QALL,OAMjBC,QAAQC,IAAI,sBAEZ,EAAKC,mBAAmBL,GARP,E,+DAWAA,GACjB,IAEIM,EAAW,CACXC,UAAWC,KAAKhB,MAAML,eACtBsB,cAAeD,KAAKhB,MAAMJ,gBAC1BsB,WAAY,qBACZC,aAAcH,KAAKhB,MAAMH,YACzBW,KAAKA,GAGKY,MAVJ,+CAUc,CACpBC,OAAO,OACPC,QAAS,CACL,eAAgB,mDAEpBC,KAAMC,IAAGC,UAAUX,KAIfY,MAAK,SAACC,GACZ,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLlB,QAAQC,IAAI,WAAYiB,MAMzBC,OAAM,SAACC,GACNpB,QAAQoB,MAAM,SAAUA,Q,oCAKxB,IAAIC,EAAM,IAAIC,eACdtB,QAAQC,IAAI,6BACZ,IAAIsB,EAAMlB,KAAKhB,MAAMC,WAAa,aAAee,KAAKhB,MAAML,eAAiB,iBAAmBqB,KAAKhB,MAAMH,YAAc,oDACzHmC,EAAIG,iBAAiB,QAAQ,WAC3BxB,QAAQC,IAAIoB,EAAII,aAChB/B,OAAOC,SAAS+B,QAAQL,EAAII,gBAE9BJ,EAAIM,KAAK,MAAOJ,GAChBF,EAAIO,S,+BAIN,IAAIC,EAgBJ,OAbEA,EAF+B,KAA7BxB,KAAKhB,MAAME,gBAEH,4BAAQuC,KAAK,SAASC,QAAS1B,KAAK2B,YAAYC,KAAK5B,MAAO6B,UAAU,mBAAtE,sBAKV,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAc7B,KAAKhB,MAAMG,QACvC,wBAAI0C,UAAU,iCAAiC7B,KAAKhB,MAAME,iBAC1D,uBAAG2C,UAAU,aAAb,+BAKJ,6BACKL,O,GAvFaM,aCAxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3aa2c815.chunk.js","sourcesContent":["const keys = {\n  instagramAppId : '534548134144297',\n  instagramSecret : '59b380e96bbb3de5f48ce4438c1916f9',\n  redirectUri : 'https://tantrojan.github.io/Insta_Stat'\n}\n\nexport default keys;\n","import React, { Component } from 'react';\nimport keys from './authenticationKeys.js'\nimport qs from 'qs'\n\nclass Dashboard extends Component {\n\n  state = {\n    requestUrl : 'https://api.instagram.com/oauth/authorize?',\n    instagramAppId : keys.instagramAppId,\n    instagramSecret : keys.instagramSecret,\n    redirectUri : keys.redirectUri,\n    userAccessToken : '',\n    userId : ''\n  }\n  constructor(props) {\n    super(props);\n\n    let loc = window.location.search;\n    let params = new URLSearchParams(loc);\n    let code = params.get('code')\n    console.log(\"Inside constructor\")\n\n    this.getUserAccessToken(code)\n\n  }\n  getUserAccessToken(code){\n    let url = 'https://api.instagram.com/oauth/access_token';\n\n    let postData = {\n        client_id: this.state.instagramAppId,\n        client_secret: this.state.instagramSecret,\n        grant_type: 'authorization_code',\n        redirect_uri: this.state.redirectUri,\n        code:code\n    }\n\n    let promise = fetch(url,{\n        method:'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n        },\n        body: qs.stringify(postData)\n      }\n    );\n\n    promise.then((response) => {\n      return response.json();\n    })\n    .then((data) => {\n      console.log('Success:', data);\n      // this.setState({\n      //   userAccessToken: data.access_token,\n      //   userId: data.user_id\n      // })\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n\n  }\n  getUserCode(){\n      let xhr = new XMLHttpRequest();\n      console.log(\"Inside getUserAccessToken\")\n      let url = this.state.requestUrl + 'client_id=' + this.state.instagramAppId + '&redirect_uri=' + this.state.redirectUri + '&scope=user_profile,user_media&response_type=code'\n      xhr.addEventListener('load', () => {\n        console.log(xhr.responseURL)\n        window.location.replace(xhr.responseURL)\n      })\n      xhr.open('GET', url)\n      xhr.send()\n  }\n  render() {\n\n    let display;\n    if (this.state.userAccessToken==='')\n    {\n      display = <button type=\"button\" onClick={this.getUserCode.bind(this)} className=\"btn btn-primary\">Give Authorization</button>\n    }\n    else\n    {\n      display =\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{this.state.userId}</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">{this.state.userAccessToken}</h6>\n          <p className=\"card-text\">Stay Hungry, Stay Foolish</p>\n        </div>\n      </div>\n    }\n    return (\n      <div >\n          {display}\n      </div>\n    );\n  }\n\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './Dashboard';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}